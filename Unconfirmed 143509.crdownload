{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "1473486c",
   "metadata": {},
   "source": [
    "## Small Image Classification Using Simple Aritifical Neural Network: GPU Benchmarking"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f8a6ff68",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow import keras\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "# Version Information\n",
    "# tensorflow 2.2.0 , Cudnn7.6.5 and Cuda 10.1 , python 3.8"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bfb8bb31",
   "metadata": {},
   "source": [
    "##This command shows list of physical devices available for tensorflow. You can see GPU listed here. If you have NVIDIA GPU you need to install CUDA toolkit and cuDNN as per instruction on this webpage. Without proper installation you will not see GPU in list of devices"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "06c3c876",
   "metadata": {},
   "outputs": [],
   "source": [
    "tf.config.experimental.list_physical_devices()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0ee4591c",
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Default GPU Device: /device:GPU:0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-08-14 06:05:20.602283: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1928] Created device /device:GPU:0 with 15288 MB memory:  -> device: 0, name: Tesla P100-SXM2-16GB, pci bus id: 0000:06:00.0, compute capability: 6.0\n",
      "2024-08-14 06:05:20.603142: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1928] Created device /device:GPU:1 with 15288 MB memory:  -> device: 1, name: Tesla P100-SXM2-16GB, pci bus id: 0000:84:00.0, compute capability: 6.0\n",
      "2024-08-14 06:05:20.607269: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1928] Created device /device:GPU:0 with 15288 MB memory:  -> device: 0, name: Tesla P100-SXM2-16GB, pci bus id: 0000:06:00.0, compute capability: 6.0\n",
      "2024-08-14 06:05:20.607527: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1928] Created device /device:GPU:1 with 15288 MB memory:  -> device: 1, name: Tesla P100-SXM2-16GB, pci bus id: 0000:84:00.0, compute capability: 6.0\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "if tf.test.gpu_device_name():\n",
    "    print('Default GPU Device: {}'.format(tf.test.gpu_device_name()))\n",
    "else:\n",
    "    print(\"Please install GPU version of TF\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6c56618e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "print(tf.test.is_built_with_cuda())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "53918b0e",
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /tmp/ipykernel_629/2964415598.py:1: is_gpu_available (from tensorflow.python.framework.test_util) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use `tf.config.list_physical_devices('GPU')` instead.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-08-14 06:06:15.752217: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1928] Created device /device:GPU:0 with 15288 MB memory:  -> device: 0, name: Tesla P100-SXM2-16GB, pci bus id: 0000:06:00.0, compute capability: 6.0\n",
      "2024-08-14 06:06:15.752510: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1928] Created device /device:GPU:1 with 15288 MB memory:  -> device: 1, name: Tesla P100-SXM2-16GB, pci bus id: 0000:84:00.0, compute capability: 6.0\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tf.test.is_gpu_available( cuda_only=False, min_cuda_compute_capability=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "48dcdbbe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Num GPUs Available:  2\n"
     ]
    }
   ],
   "source": [
    " import tensorflow as tf\n",
    ">>> print(\"Num GPUs Available: \", len(tf.config.experimental.list_physical_devices('GPU')))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "1ef6cb0e",
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-08-14 06:07:01.417722: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1928] Created device /device:GPU:0 with 15288 MB memory:  -> device: 0, name: Tesla P100-SXM2-16GB, pci bus id: 0000:06:00.0, compute capability: 6.0\n",
      "2024-08-14 06:07:01.418139: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1928] Created device /device:GPU:1 with 15288 MB memory:  -> device: 1, name: Tesla P100-SXM2-16GB, pci bus id: 0000:84:00.0, compute capability: 6.0\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'/device:GPU:0'"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "tf.test.gpu_device_name()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "1e630c4f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Num GPUs Available:  2\n"
     ]
    }
   ],
   "source": [
    "print(\"Num GPUs Available: \", len(tf.config.list_physical_devices('GPU')))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "0bd0441d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'2.16.1'"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tf.__version__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "05df86d2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tf.test.is_built_with_cuda()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5107ccb5",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "9ccac6be",
   "metadata": {},
   "source": [
    "## this Below the Commands are Check Cuda is Avialbe are not , in pytorch "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9499a9b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import torch\n",
    "\n",
    "# # Check if CUDA is available\n",
    "# if torch.cuda.is_available():\n",
    "#     print(\"CUDA is available! Running on GPU.\")\n",
    "#     # Add your GPU-specific commands here\n",
    "#     # Example: Set the device\n",
    "#     device = torch.device(\"cuda\")\n",
    "#     print(\"Using device:\", device)\n",
    "\n",
    "#     # Example command using GPU\n",
    "#     tensor = torch.randn(3, 3).to(device)\n",
    "#     print(\"Tensor on GPU:\", tensor)\n",
    "\n",
    "# else:\n",
    "#     print(\"CUDA is not available. Running on CPU.\")\n",
    "#     # Add your CPU-specific commands here\n",
    "#     # Example: Set the device\n",
    "#     device = torch.device(\"cpu\")\n",
    "#     print(\"Using device:\", device)\n",
    "\n",
    "#     # Example command using CPU\n",
    "#     tensor = torch.randn(3, 3).to(device)\n",
    "#     print(\"Tensor on CPU:\", tensor)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1dcb0c08",
   "metadata": {},
   "source": [
    "## Load the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9857646f",
   "metadata": {},
   "outputs": [],
   "source": [
    "## https://keras.io/api/datasets/   .  This Artical to follow to Downlaods a Dataset through a Keras "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b57cbeb6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading data from https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz\n",
      "170498071/170498071 [==============================] - 2708s 16us/step\n"
     ]
    }
   ],
   "source": [
    "(x_train, y_train), (x_test, y_test) = keras.datasets.cifar10.load_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "1a5ff0b8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x_train.shape (50000, 32, 32, 3)\n",
      "y_train.shape (50000, 1)\n"
     ]
    }
   ],
   "source": [
    "print(\"x_train.shape\", x_train.shape)\n",
    "\n",
    "\n",
    "print(\"y_train.shape\" , y_train.shape)\n",
    "\n",
    "      "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "92f585b4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "y_train.shape (50000, 1)\n",
      "y_train.shape (10000, 1)\n"
     ]
    }
   ],
   "source": [
    "print(\"y_train.shape\", y_train.shape)\n",
    "\n",
    "\n",
    "print(\"y_train.shape\" , y_test.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f423f23b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# x_train.shape == (50000, 32, 32, 3)\n",
    "# x_test.shape == (10000, 32, 32, 3)\n",
    "# y_train.shape == (50000, 1)\n",
    "# y_test.shape == (10000, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "557af387",
   "metadata": {},
   "source": [
    "## Data Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "4de44b92",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "None\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def plot_sample(index):\n",
    "    plt.figure(figsize = (10,5))\n",
    "    plt.imshow(x_train[index])\n",
    "print(plot_sample(0))    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "f36d012a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "None\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(plot_sample(2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "797dee4f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']\n"
     ]
    }
   ],
   "source": [
    "classes = [\"airplane\",\"automobile\",\"bird\",\"cat\",\"deer\",\"dog\",\"frog\",\"horse\",\"ship\",\"truck\"]\n",
    "print(classes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "b1cb31f5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'deer'"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "classes[y_train[3][0]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "d7c0fba3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[6],\n",
       "       [9],\n",
       "       [9]], dtype=uint8)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train[:3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bbbad0ff",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Loads the CIFAR10 dataset.\n",
    "\n",
    "# This is a dataset of 50,000 32x32 color training images and 10,000 test images, labeled over 10 categories. See more info at the CIFAR homepage.\n",
    "\n",
    "# The classes are:\n",
    "\n",
    "# Label\tDescription\n",
    "# 0\tairplane\n",
    "# 1\tautomobile\n",
    "# 2\tbird\n",
    "# 3\tcat\n",
    "# 4\tdeer\n",
    "# 5\tdog\n",
    "# 6\tfrog\n",
    "# 7\thorse\n",
    "# 8\tship\n",
    "# 9\ttruck"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "5d1003be",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10000, 1)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "638dd98c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(50000, 32, 32, 3)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "df0e34a5",
   "metadata": {},
   "source": [
    "## Preprocessing: Scale images"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "2ddb5dbe",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train_scaled = x_train / 255\n",
    "x_test_scaled = x_test / 255"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "895afd92",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_train_categorical = keras.utils.to_categorical(\n",
    "    y_train, num_classes=10, dtype='float32'\n",
    ")\n",
    "y_test_categorical = keras.utils.to_categorical(\n",
    "    y_test, num_classes=10, dtype='float32'\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "437d13a8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[6],\n",
       "       [9],\n",
       "       [9],\n",
       "       [4],\n",
       "       [1]], dtype=uint8)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train[0:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "765970e4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 0., 0., 0., 0., 0., 1.],\n",
       "       [0., 0., 0., 0., 0., 0., 0., 0., 0., 1.],\n",
       "       [0., 0., 0., 0., 1., 0., 0., 0., 0., 0.],\n",
       "       [0., 1., 0., 0., 0., 0., 0., 0., 0., 0.]], dtype=float32)"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train_categorical[0:5]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98f48594",
   "metadata": {},
   "source": [
    "## Model building and training ANN Model "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "226b6951",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1723619588.184891    1137 service.cc:145] XLA service 0x7fcfa0c19f80 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1723619588.184934    1137 service.cc:153]   StreamExecutor device (0): Tesla P100-SXM2-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1723619588.184937    1137 service.cc:153]   StreamExecutor device (1): Tesla P100-SXM2-16GB, Compute Capability 6.0\n",
      "2024-08-14 07:13:08.204679: I external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:465] Loaded cuDNN version 90201\n",
      "I0000 00:00:1723619588.268774    1137 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1563/1563 [==============================] - 25s 4ms/step - loss: 1.8132 - accuracy: 0.3530\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<tf_keras.src.callbacks.History at 0x7fd26b165a80>"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = keras.Sequential([\n",
    "        keras.layers.Flatten(input_shape=(32,32,3)),\n",
    "        keras.layers.Dense(3000, activation='relu'),\n",
    "        keras.layers.Dense(1000, activation='relu'),\n",
    "        keras.layers.Dense(10, activation='sigmoid')    \n",
    "    ])\n",
    "\n",
    "model.compile(optimizer='SGD',\n",
    "              loss='categorical_crossentropy',\n",
    "              metrics=['accuracy'])\n",
    "\n",
    "model.fit(x_train_scaled, y_train_categorical, epochs=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f36bd97",
   "metadata": {},
   "source": [
    "## Let's make some predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "dfdadd49",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "313/313 [==============================] - 1s 2ms/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.argmax(model.predict(x_test_scaled)[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "bb232bc6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([3], dtype=uint8)"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "1cf15704",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_model():\n",
    "    model = keras.Sequential([\n",
    "            keras.layers.Flatten(input_shape=(32,32,3)),\n",
    "            keras.layers.Dense(3000, activation='relu'),\n",
    "            keras.layers.Dense(1000, activation='relu'),\n",
    "            keras.layers.Dense(10, activation='sigmoid')    \n",
    "        ])\n",
    "\n",
    "    model.compile(optimizer='SGD',\n",
    "                  loss='categorical_crossentropy',\n",
    "                  metrics=['accuracy'])\n",
    "    return model\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c117897",
   "metadata": {},
   "source": [
    "## Measure training time on a CPU"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "4358dd1c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   3/1563 [..............................] - ETA: 1:09 - loss: 2.3669 - accuracy: 0.1146 "
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1723619682.110282    1137 service.cc:145] XLA service 0x7fcfa1d7fad0 initialized for platform Host (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1723619682.110313    1137 service.cc:153]   StreamExecutor device (0): Host, Default Version\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1563/1563 [==============================] - 77s 49ms/step - loss: 1.8126 - accuracy: 0.3545\n",
      "1min 18s ± 0 ns per loop (mean ± std. dev. of 1 run, 1 loop each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit -n1 -r1 \n",
    "with tf.device('/CPU:0'):\n",
    "    cpu_model = get_model()\n",
    "    cpu_model.fit(x_train_scaled, y_train_categorical, epochs=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "227330d0",
   "metadata": {},
   "source": [
    "## Lets measure training time on a GPU (I've NVIDIA Tesla P100-SXM2-16GB with Two GPUs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "f5056dca",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wed Aug 14 07:16:48 2024       \n",
      "+-----------------------------------------------------------------------------------------+\n",
      "| NVIDIA-SMI 560.28.03              Driver Version: 560.28.03      CUDA Version: 12.6     |\n",
      "|-----------------------------------------+------------------------+----------------------+\n",
      "| GPU  Name                 Persistence-M | Bus-Id          Disp.A | Volatile Uncorr. ECC |\n",
      "| Fan  Temp   Perf          Pwr:Usage/Cap |           Memory-Usage | GPU-Util  Compute M. |\n",
      "|                                         |                        |               MIG M. |\n",
      "|=========================================+========================+======================|\n",
      "|   0  Tesla P100-SXM2-16GB           Off |   00000000:06:00.0 Off |                  Off |\n",
      "| N/A   39C    P0             42W /  300W |   15570MiB /  16384MiB |      0%      Default |\n",
      "|                                         |                        |                  N/A |\n",
      "+-----------------------------------------+------------------------+----------------------+\n",
      "|   1  Tesla P100-SXM2-16GB           Off |   00000000:84:00.0 Off |                  Off |\n",
      "| N/A   38C    P0             44W /  300W |     266MiB /  16384MiB |      0%      Default |\n",
      "|                                         |                        |                  N/A |\n",
      "+-----------------------------------------+------------------------+----------------------+\n",
      "                                                                                         \n",
      "+-----------------------------------------------------------------------------------------+\n",
      "| Processes:                                                                              |\n",
      "|  GPU   GI   CI        PID   Type   Process name                              GPU Memory |\n",
      "|        ID   ID                                                               Usage      |\n",
      "|=========================================================================================|\n",
      "+-----------------------------------------------------------------------------------------+\n"
     ]
    }
   ],
   "source": [
    "# !nvidia-smi "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "68cc56bb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1563/1563 [==============================] - 7s 4ms/step - loss: 1.8135 - accuracy: 0.3535\n",
      "9.97 s ± 0 ns per loop (mean ± std. dev. of 1 run, 1 loop each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit -n1 -r1 \n",
    "with tf.device('/GPU:0'):\n",
    "    cpu_model = get_model()\n",
    "    cpu_model.fit(x_train_scaled, y_train_categorical, epochs=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ede0cc9",
   "metadata": {},
   "source": [
    "## Lets run same test for 10 epocs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "72411852",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "1563/1563 [==============================] - 75s 47ms/step - loss: 1.8119 - accuracy: 0.3587\n",
      "Epoch 2/10\n",
      "1563/1563 [==============================] - 74s 47ms/step - loss: 1.6253 - accuracy: 0.4280\n",
      "Epoch 3/10\n",
      "1563/1563 [==============================] - 72s 46ms/step - loss: 1.5407 - accuracy: 0.4570\n",
      "Epoch 4/10\n",
      "1563/1563 [==============================] - 72s 46ms/step - loss: 1.4814 - accuracy: 0.4781\n",
      "Epoch 5/10\n",
      "1563/1563 [==============================] - 72s 46ms/step - loss: 1.4330 - accuracy: 0.4957\n",
      "Epoch 6/10\n",
      "1563/1563 [==============================] - 71s 46ms/step - loss: 1.3876 - accuracy: 0.5106\n",
      "Epoch 7/10\n",
      "1563/1563 [==============================] - 71s 45ms/step - loss: 1.3517 - accuracy: 0.5253\n",
      "Epoch 8/10\n",
      "1563/1563 [==============================] - 71s 46ms/step - loss: 1.3158 - accuracy: 0.5397\n",
      "Epoch 9/10\n",
      "1563/1563 [==============================] - 71s 46ms/step - loss: 1.2828 - accuracy: 0.5499\n",
      "Epoch 10/10\n",
      "1563/1563 [==============================] - 75s 48ms/step - loss: 1.2526 - accuracy: 0.5605\n",
      "12min 6s ± 0 ns per loop (mean ± std. dev. of 1 run, 1 loop each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit -n1 -r1 \n",
    "with tf.device('/CPU:0'):\n",
    "    cpu_model = get_model()\n",
    "    cpu_model.fit(x_train_scaled, y_train_categorical, epochs=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "d0c6adb4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "1563/1563 [==============================] - 8s 4ms/step - loss: 1.8132 - accuracy: 0.3540\n",
      "Epoch 2/10\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 1.6228 - accuracy: 0.4275\n",
      "Epoch 3/10\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 1.5420 - accuracy: 0.4570\n",
      "Epoch 4/10\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 1.4827 - accuracy: 0.4790\n",
      "Epoch 5/10\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 1.4327 - accuracy: 0.4961\n",
      "Epoch 6/10\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 1.3891 - accuracy: 0.5135\n",
      "Epoch 7/10\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 1.3511 - accuracy: 0.5259\n",
      "Epoch 8/10\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 1.3174 - accuracy: 0.5384\n",
      "Epoch 9/10\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 1.2849 - accuracy: 0.5517\n",
      "Epoch 10/10\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 1.2546 - accuracy: 0.5621\n",
      "1min 7s ± 0 ns per loop (mean ± std. dev. of 1 run, 1 loop each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit -n1 -r1 \n",
    "with tf.device('/GPU:0'):\n",
    "    cpu_model = get_model()\n",
    "    cpu_model.fit(x_train_scaled, y_train_categorical, epochs=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "766d4a04",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "67e5d7ea",
   "metadata": {},
   "source": [
    "# Here is the performance comparison for 1 epoch,\n",
    "\n",
    "#       Epoch       CPU              GPU\n",
    "# 1     Epoch  1 min[CPU]        [GPU] 9.97 Sec\n",
    "# 10    Epoch   12 min[CPU]       [GPU] 1 min "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ea515f1",
   "metadata": {},
   "source": [
    "## Model Convolutional Neural Network (CNN)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "086e27d5",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow import keras\n",
    "\n",
    "def get_cnn_model():\n",
    "    model = keras.Sequential([\n",
    "        # Convolutional layers with pooling\n",
    "        keras.layers.Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(32, 32, 3)),\n",
    "        keras.layers.MaxPooling2D(pool_size=(2, 2)),\n",
    "        \n",
    "        keras.layers.Conv2D(64, kernel_size=(3, 3), activation='relu'),\n",
    "        keras.layers.MaxPooling2D(pool_size=(2, 2)),\n",
    "        \n",
    "        keras.layers.Conv2D(128, kernel_size=(3, 3), activation='relu'),\n",
    "        keras.layers.MaxPooling2D(pool_size=(2, 2)),\n",
    "        \n",
    "        # Flatten the output for the Dense layers\n",
    "        keras.layers.Flatten(),\n",
    "        \n",
    "        # Fully connected layers\n",
    "        keras.layers.Dense(3000, activation='relu'),\n",
    "        keras.layers.Dense(1000, activation='relu'),\n",
    "        \n",
    "        # Output layer\n",
    "        keras.layers.Dense(10, activation='softmax')    \n",
    "    ])\n",
    "\n",
    "    # Compile the model\n",
    "    model.compile(optimizer='SGD',\n",
    "                  loss='categorical_crossentropy',\n",
    "                  metrics=['accuracy'])\n",
    "    return model\n",
    "\n",
    "# To create the model\n",
    "model = get_cnn_model()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "9d960fb3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "5697c40d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1563/1563 [==============================] - 61s 37ms/step - loss: 2.1030 - accuracy: 0.2266\n",
      "Training time on CPU: 62.54 seconds\n"
     ]
    }
   ],
   "source": [
    "# # Measure training time on CPU\n",
    "# %%timeit -n1 -r1\n",
    "# with tf.device('/CPU:0'):\n",
    "#     cpu_model = get_cnn_model()\n",
    "#     cpu_model.fit(X_train_scaled, y_train_categorical, epochs=1)\n",
    "\n",
    "\n",
    "start_time = time.time()\n",
    "with tf.device('/CPU:0'):\n",
    "    cpu_model = get_cnn_model()\n",
    "    cpu_model.fit(x_train_scaled, y_train_categorical, epochs=1)\n",
    "cpu_time = time.time() - start_time\n",
    "print(f\"Training time on CPU: {cpu_time:.2f} seconds\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "c2e4a554",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1563/1563 [==============================] - 14s 7ms/step - loss: 2.1293 - accuracy: 0.2064\n",
      "Training time on GPU: 16.11 seconds\n"
     ]
    }
   ],
   "source": [
    "# #Measure Training Time on GPU:\n",
    "\n",
    "# # Measure training time on GPU\n",
    "# %%timeit -n1 -r1\n",
    "# with tf.device('/GPU:0'):\n",
    "#     gpu_model = get_cnn_model()\n",
    "#     gpu_model.fit(X_train_scaled, y_train_categorical, epochs=1)\n",
    "\n",
    "\n",
    "\n",
    "start_time = time.time()\n",
    "with tf.device('/GPU:0'):\n",
    "    gpu_model = get_cnn_model()\n",
    "    gpu_model.fit(x_train_scaled, y_train_categorical, epochs=1)\n",
    "gpu_time = time.time() - start_time\n",
    "print(f\"Training time on GPU: {gpu_time:.2f} seconds\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "84408160",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Measure Training Time for Multiple Epochs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "082347dd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "1563/1563 [==============================] - 61s 37ms/step - loss: 2.1337 - accuracy: 0.2088\n",
      "Epoch 2/10\n",
      "1563/1563 [==============================] - 61s 39ms/step - loss: 1.7630 - accuracy: 0.3605\n",
      "Epoch 3/10\n",
      "1563/1563 [==============================] - 63s 40ms/step - loss: 1.5372 - accuracy: 0.4428\n",
      "Epoch 4/10\n",
      "1563/1563 [==============================] - 59s 38ms/step - loss: 1.3975 - accuracy: 0.4997\n",
      "Epoch 5/10\n",
      "1563/1563 [==============================] - 66s 42ms/step - loss: 1.2905 - accuracy: 0.5405\n",
      "Epoch 6/10\n",
      "1563/1563 [==============================] - 67s 43ms/step - loss: 1.2081 - accuracy: 0.5718\n",
      "Epoch 7/10\n",
      "1563/1563 [==============================] - 64s 41ms/step - loss: 1.1337 - accuracy: 0.6021\n",
      "Epoch 8/10\n",
      "1563/1563 [==============================] - 61s 39ms/step - loss: 1.0677 - accuracy: 0.6263\n",
      "Epoch 9/10\n",
      "1563/1563 [==============================] - 61s 39ms/step - loss: 1.0079 - accuracy: 0.6499\n",
      "Epoch 10/10\n",
      "1563/1563 [==============================] - 61s 39ms/step - loss: 0.9506 - accuracy: 0.6696\n",
      "Training time on CPU: 625.68 seconds\n"
     ]
    }
   ],
   "source": [
    "## On CPU:\n",
    "\n",
    "# # Measure training time on CPU for 10 epochs\n",
    "# %%timeit -n1 -r1\n",
    "# with tf.device('/CPU:0'):\n",
    "#     cpu_model = get_cnn_model()\n",
    "#     cpu_model.fit(X_train_scaled, y_train_categorical, epochs=10)\n",
    "\n",
    "start_time = time.time()\n",
    "with tf.device('/CPU:0'):\n",
    "    cpu_model = get_cnn_model()\n",
    "    cpu_model.fit(x_train_scaled, y_train_categorical, epochs=10)\n",
    "cpu_time = time.time() - start_time\n",
    "print(f\"Training time on CPU: {cpu_time:.2f} seconds\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "759d1491",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "1563/1563 [==============================] - 12s 6ms/step - loss: 2.1174 - accuracy: 0.2111\n",
      "Epoch 2/10\n",
      "1563/1563 [==============================] - 10s 6ms/step - loss: 1.7631 - accuracy: 0.3598\n",
      "Epoch 3/10\n",
      "1563/1563 [==============================] - 10s 6ms/step - loss: 1.5390 - accuracy: 0.4444\n",
      "Epoch 4/10\n",
      "1563/1563 [==============================] - 10s 6ms/step - loss: 1.4006 - accuracy: 0.4989\n",
      "Epoch 5/10\n",
      "1563/1563 [==============================] - 10s 6ms/step - loss: 1.2879 - accuracy: 0.5407\n",
      "Epoch 6/10\n",
      "1563/1563 [==============================] - 10s 6ms/step - loss: 1.2004 - accuracy: 0.5760\n",
      "Epoch 7/10\n",
      "1563/1563 [==============================] - 10s 7ms/step - loss: 1.1267 - accuracy: 0.6040\n",
      "Epoch 8/10\n",
      "1563/1563 [==============================] - 10s 7ms/step - loss: 1.0581 - accuracy: 0.6289\n",
      "Epoch 9/10\n",
      "1563/1563 [==============================] - 10s 7ms/step - loss: 0.9979 - accuracy: 0.6519\n",
      "Epoch 10/10\n",
      "1563/1563 [==============================] - 10s 7ms/step - loss: 0.9391 - accuracy: 0.6740\n",
      "Training time on GPU: 105.17 seconds\n"
     ]
    }
   ],
   "source": [
    "# ## On GPU:\n",
    "\n",
    "# # Measure training time on GPU for 10 epochs\n",
    "# %%timeit -n1 -r1\n",
    "# with tf.device('/GPU:0'):\n",
    "#     gpu_model = get_cnn_model()\n",
    "#     gpu_model.fit(X_train_scaled, y_train_categorical, epochs=10)\n",
    "\n",
    "\n",
    "\n",
    "start_time = time.time()\n",
    "with tf.device('/GPU:0'):\n",
    "    gpu_model = get_cnn_model()\n",
    "    gpu_model.fit(x_train_scaled, y_train_categorical, epochs=10)\n",
    "gpu_time = time.time() - start_time\n",
    "print(f\"Training time on GPU: {gpu_time:.2f} seconds\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f8991c9d",
   "metadata": {},
   "source": [
    "# Here is the performance comparison for 1 epoch,\n",
    "\n",
    "#       Epoch       CPU              GPU\n",
    "# 1     Epoch  62.54 [CPU]        [GPU] 16. 11 Sec\n",
    "# 10    Epoch   625.68 [CPU]       [GPU] 105.17 Sec"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3f4fe639",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
